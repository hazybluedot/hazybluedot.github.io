<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.hazyblue.me/</id>
  <title>Awesome Feed</title>
  <updated>2013-06-26T20:40:05Z</updated>
  <link rel="alternate" href="http://www.hazyblue.me/"/>
  <link rel="self" href="http://www.hazyblue.me/feed.xml"/>
  <author>
    <name>dkm</name>
    <uri>dkm</uri>
  </author>
  <entry>
    <id>tag:www.hazyblue.me,2013-06-26:/2013/06/whitehead-on-the-holodeck/</id>
    <title type="html">LEGOs, Whitehead, and the Holodeck</title>
    <published>2013-06-26T20:40:05Z</published>
    <updated>2013-06-26T20:40:05Z</updated>
    <link rel="alternate" href="http://www.hazyblue.me/2013/06/whitehead-on-the-holodeck/"/>
    <content type="html">&lt;p&gt;There are many reasons LEGOs
&lt;a href="http://www.dailyfinance.com/2011/08/24/why-are-legos-so-expensive/"&gt;cost as much as they do&lt;/a&gt;,
one is the precise manufacturing that allows the bricks to be
assembled and disassembled with ease:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simonsen explained why the level of LEGO production quality has to
be so high, mentioning in particular what the company calls “clutch
power,” i.e., the ability of its bricks to snap together tightly
while also being easy to separate, thereby readily allowing for de-
and reconstruction. Speaking of the machines that make the bricks,
Simonsen said, “It takes a very low tolerance for all our bricks to
have that clutch power.” This precision has apparently paid off:
“All the bricks that have been produced since 1958 can be put
together
still. &lt;cite&gt;&lt;a href="http://www.dailyfinance.com/2011/08/24/why-are-legos-so-expensive/"&gt;Why are LEGOs So Expensive?&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a similar way, rules dictating the form and structure of folk tales
enabled bards to tell and pass down stories through
generations. Though each telling is different, and can be
tailored to the individual temperaments of the audience and bard, the
essence remains intact.&lt;/p&gt;

&lt;p&gt;Bards and their bag of tricks is one area explored in &lt;em&gt;Hamlet on The Holodeck&lt;/em&gt;, Janet
Murray’s expedition through the future landscape of narratives in
cyberspace.&lt;/p&gt;

&lt;p&gt;Noting that digital environments are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;procedural&lt;/li&gt;
  &lt;li&gt;participatory&lt;/li&gt;
  &lt;li&gt;spatial&lt;/li&gt;
  &lt;li&gt;encyclopedic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Murray states that these four properties “separately and collectively
make [the computer] a powerful vehicle for literary creation.” The
medium is esspecially suited for &lt;em&gt;interactive&lt;/em&gt; narratives: stories in
which the reader is an active participant. Think
&lt;a href="http://en.wikipedia.org/wiki/Choose_Your_Own_Adventure"&gt;Choose Your Own Adventure&lt;/a&gt;
without the limitations of the physical pages and structure of a book.&lt;/p&gt;

&lt;p&gt;As I was reading about the future of interactive narrative, and
reminiscing about my own experiences with Choose Your Own Adventure, I
realized that an interactive narrative is a really great framework for
thinking about an educational curriculum. There may be a high level
“plot” or sequence of plot elements that should remain consistent, but
specific details and crucially, the path taken from start to end
should be left to the participant.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;On the bardic traditions used to preserve stories before written
language Murray writes (emphasis my own),:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The stories are composed anew for each recitation and are therefore
multiform, with no single canonical version. Every performance of a
story varies from all others, reflecting the &lt;em&gt;interest of the
audience&lt;/em&gt; and the &lt;em&gt;dramatic interpretation of the
storyteller&lt;/em&gt;. &lt;cite&gt;Janet Murray&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bardic system, she says, serves to preserve the underlying
patterns associated with a story through tellers and generations, but
not a particular arrangement of words. This is made possible by
employing a relatively small set of formula “starting at the level of
the phrase and moving through the organization of the story as a
whole.”&lt;sup id="fnref:murray"&gt;&lt;a href="#fn:murray" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So formulaic in fact that Vladimir Propp, a Russian formalist, was
able to reduce 450 Russian fairy tales into variants of a single story
by utilizing 25 basic plot events, which Murray refers to as “Propp’s
essential morphemes”, some of which are &lt;sup id="fnref:propp"&gt;&lt;a href="#fn:propp" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;(A)&lt;/dt&gt;
  &lt;dd&gt;The villain causes harm or injury to a member of the family.&lt;/dd&gt;
  &lt;dt&gt;(a)&lt;/dt&gt;
  &lt;dd&gt;One member of the family either lacks something or desires something&lt;/dd&gt;
  &lt;dt&gt;(up arrow)&lt;/dt&gt;
  &lt;dd&gt;The hero leaves home&lt;/dd&gt;
  &lt;dt&gt;(D)&lt;/dt&gt;
  &lt;dd&gt;The hero is tested (ten variants ranging from request for help to challenges to fight)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;an onward. Most of the elements will be familiar to anyone from any
culture, as many of the themes are common to all story
traditions. Propp goes on to show that more than just an encyclopedic
store of the essential morphemes are needed and in fact there are a
set of rules that dictate how they are combined, when a substitution
is allowed, and the order in which subplots may occur.&lt;/p&gt;

&lt;p&gt;Rather than restrict the storyteller,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Propp’s analysis makes clear that the formulaic underpinning makes
folktales more intricate; it allows storytellers to weave together
multiple different story sequences without becoming
confused. &lt;cite&gt;Janet Murray&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea really clicked for me. At first glance it seems like a
paradox: restriction of action provides freedom. But often the paradox
is just an illusion: the rigorously enforced dimensions of LEGO bricks
enable, rather then hinder, the creative freedom of the builder.  And it is interesting to note that rule creative narrative has played in the success of the iconic interconnecting bricks:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sales of these products have been huge for Lego. More important, the
experience has taught the company that what kids wanted to do with
the blocks was tell stories. Lego makes or licenses the stories they
want to tell. &lt;cite&gt;&lt;a href="http://www.npr.org/blogs/money/2012/12/13/167055503/why-legos-are-so-expensive-and-so-popular"&gt;Why Legos Are So Expensive — And So Popular&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So pieces that are designed to fit together can be used to tell
stories. Through my (albeit limited) experience exploring these ideas,
the stories talked about, both in &lt;em&gt;Hamlet on the Holodeck&lt;/em&gt; and those
licensed by LEGO, have been fictional. It goes without saying that
creating a great fictional narrative which explores the human
condition takes a great deal of creativity and genius. But what about
creating a story that tells of the interconnections between branches
and mathematics and sciences, stories that are written to help readers
gain an understanding of a particular field of study. Could the
techniques and ideas previously discussed be applied to the stories
told in academic institutions. Can we devise a set of algorithms and
story elements that will bestow individual instructors and students
the creative freedom to tailor stories to their own particular
strengths and interests, as well current events in a dynamic world,
while maintaining some level of consistency across instructors and
institutions so that while the words may not be the same, the story is
the same.&lt;/p&gt;

&lt;p&gt;To some extent, existing educational curricula already define
something like an algorithm for a larger narrative, or structured
blocks that can be assembled in a variety of different ways. The
curriculum defines which modules/topics must be part of the larger
degree, and defines a sequence to followed. How the content is
presented in each course is largely up to the individual instructor,
the bard. However, because the larger story, that of the degree, is
not told by a single bard the resulting experience for the audience is
all too often one of disjointed “scraps of information”, the very
thing Alfred Whitehead says has nothing to do with education:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Culture is activity of thought, and receptiveness to beauty and
human feeling. Scraps of information have nothing to do with it. A
merely well-informed man is the most useless bore on God’s
earth. &lt;cite&gt;A.N. Whitehead&lt;sup id="fnref:aims_of_education1"&gt;&lt;a href="#fn:aims_of_education1" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whitehead dicusses three stages of mental growth:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;The Stage of Romance&lt;/dt&gt;
  &lt;dd&gt;“the subject-matter has the vividness of novelty; it holds within
itself unexplored connexions with possibilities half-disclosed by
glimpses and half-concealed by the wealth of material”&lt;/dd&gt;
  &lt;dt&gt;The Stage of Precision&lt;/dt&gt;
  &lt;dd&gt;“In this stage, width of relationship is subordinated to exactness of formulation. It is the stage of grammar, the grammar of language and the grammar of science.”&lt;/dd&gt;
  &lt;dt&gt;The Stage of Generalization &lt;/dt&gt;
  &lt;dd&gt;“The final stage of generalisation is &lt;a href="http://en.wikipedia.org/wiki/Thesis,_antithesis,_synthesis"&gt;Hegel’s synthesis&lt;/a&gt;. It is a return to romanticism with added advantage of classified ideas and relevant technique.”&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;and suggests that these stages occur in a natural cycle when allowed
to, such as in the development of language. He also suggests that
these stages provide the framework for general education:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Education should consist in a continual repetition of such
cycles. Each lesson in its minor way should form an eddy cycle
issuing in its own subordinate process. Longer periods should issue
in definite attainments, which then form the starting-grounds for
fresh cycles. &lt;cite&gt;A.F. Whitehead&lt;sup id="fnref:aims_of_education2"&gt;&lt;a href="#fn:aims_of_education2" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Propp reverse engineered a set of rules that dictate how predefined
story elements may be combined to form a customizable, coherent fairy
tale, which in the oral tradition, is tailored to the particular
personalities of audience and performer. Could we do something similar
for university courses using Whitehead’s three stage cycle as a
blueprint?&lt;/p&gt;

&lt;p&gt;Starting from the third in the cycle, the stage of generalization
specifically addresses the question of interconnections. It is in this
stage in which the work down in the stage of precision is generalized
to other topics and fields. Would it be reasonable to say that all
topics/courses/degree programs should conclude with a stage of
generalization so that the story can continue in any of a number of
future directions, beginning with a new stage of romance? It would
then follow that all topics/courses/degrees would start with a stage
of romance that would provide a seamless transition from any number of
prior generalizations that different students may enter with.&lt;/p&gt;

&lt;p&gt;Whitehead is careful to point out that his three stages shouldn’t be
taken as absolute, rigorously defined partitions, and that elements of
all three stages of thinking should be present throughout a learning
experience. But by consciously emphasizing certain stages at key parts
in the educational cycle, might we create educational “bricks” that
can be assembled in highly personalized configurations for each
student? I’m not quite sure what this would look like on a large
scale, but have some ideas of how I would implement it in my own
course which I will cover in a future post. I’d be interested to hear
the views of others, particularly those who have more experience in
less technical areas.  Does the idea of trying to apply a structure
and a set of rules to create curriculum building blocks sound
ridiculous in less rigorous and technical fields than electrical
engineering and software design?&lt;/p&gt;

&lt;p&gt;Since I still don’t have a commenting system implemented yet, please
share your thoughts in your own blog with a link back here, or email
them to me directly and I’ll publish them as comments once I get a
system working.&lt;/p&gt;
&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:murray"&gt;
      &lt;p&gt;Janet Murray, &lt;em&gt;Hamlet on the Holodeck&lt;/em&gt;, 1997&lt;a href="#fnref:murray" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:propp"&gt;
      &lt;p&gt;Propp, Morphology of the Folk Tale&lt;a href="#fnref:propp" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:aims_of_education1"&gt;
      &lt;p&gt;A.F. Whitehead, The Aims of Education, p. 1&lt;a href="#fnref:aims_of_education1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:aims_of_education2"&gt;
      &lt;p&gt;A.F. Whitehead, The Aims of Education, p. 19&lt;a href="#fnref:aims_of_education2" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.hazyblue.me,2013-06-08:/2013/06/getting-technical/</id>
    <title type="html">Getting Technical</title>
    <published>2013-06-08T22:38:39Z</published>
    <updated>2013-06-08T22:38:39Z</updated>
    <link rel="alternate" href="http://www.hazyblue.me/2013/06/getting-technical/"/>
    <content type="html">&lt;p&gt;Some personal interests seem to wax and wane, but remain ever-present
in my mind. Lurking. Waiting for the right moment to make my brain think.&lt;/p&gt;

&lt;p&gt;I remember creating my first web page in the very early years of the
web. Luckily it has long been removed from the internet, for it was a
ghastly thing. But I continued to dabble in web development throughout
high school and even briefly formed a LLC with a friend to create
websites for people (and back in those days open source content
management systems hadn’t been created yet, so we rolled our own in
Perl). We created two, neither of which are still live in their
original form (again, this is a good thing for anyone actually wanting
to visit them). Part of my employment during my undergraduate years
was working for &lt;a href="http://www.oit.umass.edu/"&gt;OIT at UMass&lt;/a&gt;, working on
new content management techniques for their web site, and then my
first job at Virginia Tech was working on the Online Graduate
Application Processing System
(&lt;a href="https://ogaps.stl.vt.edu/ogaps/"&gt;OGAPS&lt;/a&gt;), a web based application
for viewing graduate applications to the department. When it came time
to put up a website for Spoke ‘n’ Beans I was at it again, though that
site is no longer active, and of course, my current project,
&lt;a href="http://illichvillich.net"&gt;illichvillich.net&lt;/a&gt; is still a work in
progress as I continue to figure out just what it is.&lt;/p&gt;

&lt;p&gt;In one way or another I’ve been following the trends of web site
development ever since there was a web to develop (though sadly, I
still don’t really have a knack for the ‘design’ part of things).&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;One of the aspects of web development that appeals to me, and why I
think it has been an interest for so long, is the process of
structuring data in a way that can easily be displayed in a number of
different formats. To make this possible, various technologies have been
developed over the years to facilitate the separation of content,
structure and presentation. The result can look like alphabet soup
when you find out that what you see in your web browser is made
possible by HTML, CSS, JavaScript, PHP, CGI, SQL, to name a few.&lt;/p&gt;

&lt;h2 id="in-the-beginning-there-was-sgml"&gt;In the beginning, there was SGML&lt;/h2&gt;

&lt;p&gt;Hypertext Markup Language (HTML) was developed by Tim Berners-Lee at
CERN in 1989. The purpose was to provide a means to link bits of
research papers together to facilitate collaboration between particle
physicists. In a nutshell, starting with the established
&lt;a href="http://www.w3.org/MarkUp/SGML/"&gt;SGML&lt;/a&gt; which defined things like
headers, paragraphs and lists, Berners-Lee added the &lt;code&gt;href&lt;/code&gt; attribute to the
anchor element&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; to allow linking between documents.&lt;/p&gt;

&lt;p&gt;A simple HTML file looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;paragraph&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; with a link to &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.google.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;google&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it is fairly easy to read and figure out what’s what, it is
structured in a way that makes it easy for a computer to
understand. While you &lt;em&gt;could&lt;/em&gt; write HTML by hand, it is tedious to get
right. First, just remembering all the tag names (‘&lt;code&gt;html&lt;/code&gt;, ‘&lt;code&gt;body&lt;/code&gt;’,
‘&lt;code&gt;h1&lt;/code&gt;’, ‘&lt;code&gt;p&lt;/code&gt;’, ‘&lt;code&gt;em&lt;/code&gt;’, etc.)  can be a pain, and then you need to
remember to properly close all tags (e.g. ‘&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;’ should always have a
matching ‘&lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt;’), and when you start nesting elements you need to be
careful about closing tags at their correct nesting level. I don’t
want to write html by hand, and neither should you.&lt;/p&gt;

&lt;h2 id="enter-markdown"&gt;Enter Markdown&lt;/h2&gt;

&lt;p&gt;Inspired by the simple markup that became common in writing text
emails, &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;
strives for simplicity and readability. It is both a syntax, that
looks like this:&lt;/p&gt;

&lt;pre lang="mkd"&gt;&lt;code&gt;# Hello World

This is a *paragraph* with a link to [google](http://www.google.com)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a tool to convert text written in the markdown syntax into valid
HTML. You can get a taste for how it all works together
&lt;a href="http://daringfireball.net/projects/markdown/dingus"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Markdown is easier to write and easier to read, at least for
humans. The syntax itself is not as expressive as HTML, but it solves
this problem nicely by allowing raw HTML mixed in with the markdown.&lt;/p&gt;

&lt;h2 id="make-it-work"&gt;Make it work&lt;/h2&gt;

&lt;p&gt;A website, such as a blog, is composed of many different HTML
pages. If I store the content for each as a markdown file, I don’t
want to have to run the &lt;code&gt;markdown&lt;/code&gt; command umpteen times to create my
site. This is where static site generators like
&lt;a href="http://nanoc.ws"&gt;nanoc&lt;/a&gt; come in. I just modify the compile rule in
nanoc’s &lt;code&gt;Rules&lt;/code&gt; file to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&lt;span class="n"&gt;compile&lt;/span&gt; &lt;span class="s1"&gt;'/posts/*'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="ss"&gt;:kramdown&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="s1"&gt;'post'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells nanoc to filter all files in the &lt;code&gt;posts/&lt;/code&gt; directory through
the &lt;a href="http://kramdown.rubyforge.org/"&gt;&lt;code&gt;kramdown&lt;/code&gt;&lt;/a&gt; filter, a Ruby
implementation of the markdown converter. I write all my files in
markdown, but after running&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nanoc co&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I get a set of HTML files!&lt;/p&gt;

&lt;h2 id="but-wait-theres-more"&gt;But Wait, There’s More&lt;/h2&gt;

&lt;p&gt;The alert reader may have noted that as snazzy as the markdown to HTML
conversion is, it doesn’t really cover everything needed to put
together a website. For instance, I haven’t even addressed things like
headers, footers and side bars.  Markdown has limited syntax support
for structural elements, and this is a &lt;em&gt;good thing&lt;/em&gt;. Typically, we
like to keep our content separate from our structure. This makes it
almost trivial to generate alternative views of content, perhaps
formatted for a small mobile screen, or converted to a PDF document.&lt;/p&gt;

&lt;p&gt;A more complete HTML page might look like something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;#!/hazy/blue/. - Getting Technical&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/stylesheets/screen.css'&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;'screen,projection'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'text/css'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/stylesheets/print.css'&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;'print'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'text/css'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'http://www.hazyblue.me/feed.xml'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'alternate'&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;'#!/hazy/blue/. - Feed'&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;'application/rss+xml'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'bp two-col light'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'header'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;#!/hazy/blue/.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'subtitle'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;open to interpretation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'sidebar'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Recent Posts&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/2013/06/getting-technical/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Getting Technical&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/2013/05/new-site/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;New Site, New Framework&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/2013/05/making-space/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Making Space&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/2013/05/open-source-treks-to-the-final-frontier/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;And Now You're an Anstronaut: Open Source Treks to The Final Frontier&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Follow&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/feed.xml'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'/assets/Feed-icon.svg.png'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"twitter-follow-button"&lt;/span&gt; &lt;span class="na"&gt;data-show-count=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/hazybluedot"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Follow @hazybluedot&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'post'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Getting Technical&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;Posted on: June 8, 2013&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some personal interests seem to wax and wane, but remain ever-present
            in my mind. Lurking. Waiting for the right moment to make you look
            back and go, ‘huh’.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s a LOT of extra information before we even get to the article
content, and most of it is going to be the same on every page. Because
software developers are strong advocates of the DRY principal, and
computers are great at highly repetitive tasks, it is not surprising
that there are tools to assist with this clerical work. Generally,
what we would like to do here is referred to as templating. We would
like to create one template of all the boiler plate HTML that should
be included on each page, and specify place holders where actual
content will appear. Since &lt;code&gt;nanoc&lt;/code&gt; is written in &lt;code&gt;ruby&lt;/code&gt;, the natural
way to do this is with &lt;a href="http://ruby-doc.org/docs/ProgrammingRuby/html/web.html#S2"&gt;Embedded Ruby&lt;/a&gt;, or &lt;a href="http://ruby-doc.org/docs/ProgrammingRuby/html/web.html#S2"&gt;&lt;code&gt;erb&lt;/code&gt;&lt;/a&gt;. Let’s
take a look at just the sidebar portion of the above HTML code and see
what it would look like as a template written with &lt;code&gt;erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-erb"&gt;&lt;span class="x"&gt;&amp;lt;div id='sidebar'&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;h2&amp;gt;Recent Posts&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;sorted_articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;      &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;div id='content'&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;div id='footer'&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;a dkm production&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interesting bits are the pieces of ruby code between the &lt;code&gt;&amp;lt;%=&lt;/code&gt; and
&lt;code&gt;%&amp;gt;&lt;/code&gt; tags. Then running these pieces of code the ruby interpreter will
replace everything between the &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; with the result generated
by running the code inside those brackets. Ruby is designed to be easy
to read, so without any prior experience with the language you can
easily tell that the first bit of code will generate a sorted list of
articles (the type &lt;code&gt;article&lt;/code&gt; is a piece of meta data the Nanoc
Blogging Helper associates with files that should be interpreted as
blog posts, rather than regular pages), putting a link to each on in a
list item (&lt;code&gt;li&lt;/code&gt;) HTML element.&lt;/p&gt;

&lt;p&gt;This is pretty nice, I just specify that structure in a single file,
and it is used on every page I create, whether it’s 1 or 100.&lt;/p&gt;

&lt;p&gt;But I’m lazy and error prone, and want to protect against silly typos,
so I decided to use &lt;a href="haml"&gt;&lt;code&gt;haml&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="http://ruby-doc.org/docs/ProgrammingRuby/html/web.html#S2"&gt;&lt;code&gt;erb&lt;/code&gt;&lt;/a&gt; as my
templating language. Haml uses indentation level to indicate blocks,
rather than a closing tag, so the template looks a little cleaner:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haml"&gt;&lt;span class="nf"&gt;#sidebar&lt;/span&gt;
  &lt;span class="nt"&gt;%h2&lt;/span&gt; Recent Posts
  &lt;span class="nt"&gt;%ul&lt;/span&gt;
    &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sorted_articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="nt"&gt;%li&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="nf"&gt;#content&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_and_preserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;#footer&lt;/span&gt;
  a dkm production&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the structure of the generated HTML is represented by the indentation
level of each line of Haml, so it is easy by just looking at the
template to see that &lt;code&gt;sidebar&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt; are all the
same structural level, and the &lt;code&gt;ul&lt;/code&gt; containing the list of sorted
articles is contained inside the &lt;code&gt;sidebar&lt;/code&gt; section. Haml also makes a
few assumptions based on common templating patterns and will treate
&lt;code&gt;#sidebar&lt;/code&gt; as a &lt;code&gt;div&lt;/code&gt; element with &lt;code&gt;id&lt;/code&gt; attribute equal to &lt;code&gt;sidebar&lt;/code&gt;,
the equivalent of &lt;code&gt;&amp;lt;div id='sidebar'&amp;gt;&lt;/code&gt; in the &lt;code&gt;erb&lt;/code&gt; example. This
handy assumption helps clean up the template and save typing. Every
character I &lt;em&gt;don’t&lt;/em&gt; need to type is one less I could potentially make
a mistake on!&lt;/p&gt;

&lt;h2 id="once-more-with-style"&gt;Once more, with style&lt;/h2&gt;

&lt;p&gt;My content is written in markdown, and pages are structured with haml
templates. But what about things like fonts, colors and margins?
Continuing on the same theme, style information is stored in a
separate file and applied to each page automatically.&lt;/p&gt;

&lt;p&gt;Cascading Stylesheets (CSS) were invented in 1994&lt;sup id="fnref:css"&gt;&lt;a href="#fn:css" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;&lt;a href="http://www.w3.org/People/Raggett/book4/ch02.html"&gt;A history of HTML&lt;/a&gt;&lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:css"&gt;
      &lt;p&gt;&lt;a href="http://www.w3.org/Style/LieBos2e/history/Overview.html"&gt;The CSS saga&lt;/a&gt;&lt;a href="#fnref:css" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.hazyblue.me,2013-06-07:/2013/05/new-site/</id>
    <title type="html">New Site, New Framework</title>
    <published>2013-06-07T15:42:04Z</published>
    <updated>2013-06-07T15:42:04Z</updated>
    <link rel="alternate" href="http://www.hazyblue.me/2013/05/new-site/"/>
    <content type="html">&lt;h2 id="goodbye-wordpress"&gt;Goodbye Wordpress&lt;/h2&gt;

&lt;p&gt;For the past two years I have been using Virginia Tech’s
&lt;a href="https://blogs.lt.vt.edu/"&gt;Blogs@VT&lt;/a&gt; service to host my blog. It’s
been nice and all, but my goal had always been to move away from the
VT hosted option and away from &lt;a href="http://www.wordpress.org"&gt;WordPress&lt;/a&gt;
too. It’s not that I don’t appreciate all that Blogs@VT or WordPress
has done: I think Blogs@VT is an excellent service providing
easy-access blog hosting to the Virginia Tech community (though they
really should fix whatever is making
&lt;a href="https://blogs.lt.vt.edu/support/2012/11/27/faq-i-cant-access-or-feed-out-my-posts-by-category/"&gt;this hack&lt;/a&gt;
necessary to get tag feeds), and WordPress is fine for what it does,
but there were a few things that bugged me, mostly relating to the…&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UI and work-flow. As a WordPress blogger I was pretty much forced to
use the WordPress interface for entering content, which is kind of
crummy if you want to do anything other than add elements that had
buttons associated with them.  The text mode interface is almost not
worth the effort, as it seems to allow HTML tags, but does some
extra parsing that makes it a pain to copy and paste HTML generated
elsewhere: WordPress seems to replace empty lines with &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; tags,
which is incredibly annoying when the code you’re pasting in has
been hard-wrapped to 80 columns. Either be a straight forward HTML
pass through, OR assume some kind of well established markup syntax
such as &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;speed. WordPress is a dynamic site generator. The actual data for
the posts is stored in a database somewhere and HTML pages are
created on the fly when a visitor requests a particular
resource. This isn’t a major issue with today’s internet and
computer speeds, but for something like a simple blog that serves up
mostly static content WordPress can feel sluggish at
times. Especially, I found, when syndicating a lot of feeds, such as
on a &lt;a href="http://blogs.lt.vt.edu/ece2524s13"&gt;mother blog&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;code syntax highlighting and equations. Yes, there are WordPress
plugins to handle both of these things, but each seem to have their
own non-standard syntax making it difficult to switch between
different engines. Furthermore, the themeing of WordPress makes it
harder than it should be to style code blocks without having to muck
around with the CSS for the rest of the site. While Blogs@VT is
excellent at responding to plugin-install requests, there is still a
non-zero turn around time, making it difficult to try a number of
solutions before settling on a final one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lack of versioning/backup. I was at the mercy of blogs@vt as far as
backups were concerned, and versioning control is pretty dismal with
the WordPress interface.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="hello-nanoc"&gt;Hello Nanoc&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://nanoc.ws"&gt;Nanoc&lt;/a&gt; is one of roughly
&lt;a href="https://iwantmyname.com/blog/2011/02/list-static-website-generators.html"&gt;32 bazillion static site generators&lt;/a&gt;. A
static site generator works a lot like the software behind a dynamic
site, like WordPress, but instead of doing the transformation of data
to HTML pages on the fly on the server, all the work is done locally
on your own machine. What gets sent to the server is a set of HTML and
CSS files that make up a complete site.&lt;/p&gt;

&lt;p&gt;Nanoc happens to be written in &lt;a href="http://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt;, a
language I am not terribly familiar with, but want to learn, one
reasons I choose Nanoc over some of the other options. Jekyll is
another popular Ruby-based static-site generator. It seems to be
primarily aimed at generating blog sites, and is very good at what it
does. While this is certainly a blog, I am also interest in creating
less blog-specific websites, and so the more general-site approach
used by Nanoc (but with some handy dandy
&lt;a href="http://nanoc.ws/docs/api/Nanoc/Helpers/Blogging.html"&gt;blogging helper modules&lt;/a&gt;)
was more appealing for my long term goals.&lt;/p&gt;

&lt;h2 id="static-is-better-for-me"&gt;Static is Better (for me)&lt;/h2&gt;

&lt;p&gt;I can use the same work-flow I use for most other text files. I create
content mostly in Markdown using Emacs. This makes it super easy to
include things like source code blocks and equations, things that were
always a bit tricky in WordPress. Since everything is stored as text
files I can use &lt;a href="http://git-scm.com"&gt;git&lt;/a&gt; for version control and because the generated
content is just a bunch of static files I can use the awesomely free
&lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; to host my site.&lt;/p&gt;

&lt;p&gt;I have more control. There are a ton of decent themes for WordPress,
but tweaking to get things the way you want can be a pain. The
stylesheets tend to be big and complex, and finding just the right
place to change can be difficult when you don’t know what you’re
looking for and there seem to be 10 times the necessary structural
elements.&lt;/p&gt;

&lt;h2 id="static-has-challenges"&gt;Static has Challenges&lt;/h2&gt;

&lt;p&gt;As I mentioned, &lt;em&gt;most&lt;/em&gt; content on a blog is static, and so it makes
sense to serve it up as static pages. As with all things in life,
there are some exceptions, notably commenting systems. The real-time
comments you see on WordPress and the like are dynamic features and
implementing these with a static site generator can be a challenge. I
had originally planned on going with a popular 3rd party service
Disqus, but after reading
&lt;a href="http://www.jeremyscheff.com/2011/08/jekyll-and-other-static-site-generators-are-currently-harmful-to-the-free-open-source-software-movement/"&gt;a strong argument&lt;/a&gt;
against Disqus on grounds of it not being open source I wavered. I’m
not sure how much of an open source fundamentalist I want to be
yet. Generally I’d like to adopt a more pragmatic philosophy and use
non-free-as-in-speech software if it gets the job done better than
free alternatives. But comments are a little special, because there’s
the other issue of data privacy. Of course, the comments themselves
will be made public, but there are other pieces of data associated
with a comment, such as email and IP addresses, that would warrant a
good read of Disqus’s (or whatever other social commenting service I’d
consider)
&lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy"&gt;privacy policy&lt;/a&gt;
before jumping in head first.&lt;/p&gt;

&lt;p&gt;It turns out that there &lt;em&gt;is&lt;/em&gt; an open-source alternative called
&lt;a href="https://github.com/phusion/juvia"&gt;juvia&lt;/a&gt;. I haven’t taken too much of
a look at it but it seems to have all the important bits in
place. Since it is just the code, I’d have to set up my own server to
run the service itself, so integrating the comments with my static
blog would be similar to the process with Disqus and make use of some
JavaScript magic.&lt;/p&gt;

&lt;p&gt;The simplicity of a
&lt;a href="http://tlvince.com/static-commenting"&gt;static commenting solution&lt;/a&gt; has
its draw. It seems the most elegant approach, if I can just get a good
workflow. Matt Palmer
&lt;a href="http://hezmatt.org/~mpalmer/blog/2011/07/19/static-comments-in-jekyll.html"&gt;has developed&lt;/a&gt;
&lt;a href="http://theshed.hezmatt.org/jekyll-static-comments/"&gt;a plugin&lt;/a&gt; for
&lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt; to handle static comments,
I suspect it could be easily modified to work with nanoc.&lt;/p&gt;

&lt;h2 id="trackbacks-vs-referrals"&gt;Trackbacks vs. Referrals&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://webtrainingwheels.com/what-are-pingbacks-and-trackbacks-and-how-do-i-use-them/"&gt;Trackbacks and Pingbacks&lt;/a&gt;
are protocols to help connect blog posts that refer to each other. The
rely on special software running on a server responding in real-time
to requests and as such are dynamic features. I have not read up
enough on either protocol to determine how or if I want to implement in
on this site. I did come across &lt;a href="http://daringfireball.net/2003/06/take_your_trackbacks_and_dangle.htmlq"&gt;a relatively old post&lt;/a&gt; making the
argument that given the majority use of Trackback it is unnecessary and
duplicates the functionality already gained by referrals. There is of
course &lt;a href="http://www.onfocus.com/2003/06/32182"&gt;a rebuttal&lt;/a&gt;, so I am still not sure what to do. One way or
another, it would be nice to generate a list of posts/pages/resources
that link back to individual articles here.&lt;/p&gt;

&lt;p&gt;Some other resources not previously linked that helped a great deal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://el-tramo.be/blog/wordpress-to-nanoc/"&gt;From WordPress to Nanoc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://mhyee.com/blog/nanoc.html"&gt;Blogging with nanoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.hazyblue.me,2013-05-15:/2013/05/making-space/</id>
    <title type="html">Making Space</title>
    <published>2013-05-15T22:11:08Z</published>
    <updated>2013-05-15T22:11:08Z</updated>
    <link rel="alternate" href="http://www.hazyblue.me/2013/05/making-space/"/>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;How to go about creating a space that facilitates learning? As we
learned from Morningstar and Farmer, there is a danger of
over-designing the space and often the users don’t end up using the
space in the way the designer intended. So we shouldn’t
over-design. But there should probably be some kind of structure,
right? Or why create the space at all? &lt;cite&gt;my brain&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are some of the thoughts that were going through my head as I
set out to plan my final project. Throughout the semester a common
focus of mine has been the lack of a space in my own field (Electrical
&amp;amp; Computer Engineering) to facilitate making connections between the
work that goes on in the department, both teaching and research, and
the outside world.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I also became interested in many of the ideas Ivan Illich presented in
&lt;a href="http://deschoolingsociety.digress.it/learning-webs/"&gt;chapter 6&lt;/a&gt; of
“&lt;a href="http://deschoolingsociety.digress.it/"&gt;Descooling
Society&lt;/a&gt;”. Specifically, how
would we go about creating a network to facilitate skill exchange and
peer matching? Once we have a peer-to-peer network of learners, what
role does an “elder” have, and how does one become an elder?&lt;/p&gt;

&lt;p&gt;I began by looking at some exiting peer networks and online
communities that I have had either direct or indirect involvement in
to see how they addressed the questions of structure, but in the space
itself, and any imposed structure between peers that imposes some sort
of hierarchy, or the notion of an “elder”.&lt;/p&gt;

&lt;h3 id="the-linux-kernel"&gt;The Linux Kernel&lt;/h3&gt;

&lt;p&gt;It has been several decades since Linus Torvalds’ &lt;a href="https://groups.google.com/forum/?fromgroups=#!msg/comp.os.minix/dlNtH7RRrGA/SwRavCzVE7gJ"&gt;original announcement&lt;/a&gt; of his new operating system:&lt;/p&gt;

&lt;pre class="text"&gt;&lt;code&gt; From: torvalds@klaava.Helsinki.FI (Linus Benedict Torvalds) 
Newsgroups: comp.os.minix 
Subject: What would you like to see most in minix? 
Summary: small poll for my new operating system 
Date: 25 Aug 91 20:57:08 GMT 
Organization: University of Helsinki 

Hello everybody out there using minix - 

I'm doing a (free) operating system (just a hobby, won't be big and
professional like gnu) for 386(486) AT clones. This has been brewing
since april, and is starting to get ready. I'd like any feedback on
things people like/dislike in minix, as my OS resembles it somewhat
(same physical layout of the file-system (due to practical reasons)
among other things).

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since that time the &lt;a href="https://www.kernel.org/"&gt;Linux kernel&lt;/a&gt; project
has grown to be the largest collaborative endeavor in the history of
computing. According to one measure, there were 1,316 developers
involved with the version 3.2 release, each contributing an average of
10,935 lines of code to the project. The clip found on the
linxfoundation’s website summarizes how this tremendous feat is
possible:&lt;/p&gt;

&lt;p&gt;&lt;iframe title="YouTube video player" width="584" height="329" src="http://www.youtube.com/embed/yVpbFMhOAwE?t=1m43s%20" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;There is a fairly simple and effective hierarchy in place: individual
developers submit patches to senior kernel developer who in turn
review and sign off on patches before sending onward to Linus Torvalds
for final approval. This is the most dictatorship-like model of any of
the networks I looked at, but I think it makes a lot of sense. The
stability and usefulness of the Linux kernel depends on all 15 million
lines of code working well with one another, a more ad-hoc “allow
everyone to contribute, fix errors later” method such as the one
embodied by &lt;a href="http://www.wikipedia.org"&gt;wikipedia&lt;/a&gt; probably wouldn’t be
effective for this project. It’s worth noting that the rather strict
structure doesn’t prevent people from maintaining and contributing to
forks of the kernel other than the one maintained by Torvalds. In
fact, &lt;a href="http://www.zdnet.com/blog/open-source/android-and-linux-re-merge-into-one-operating-system/10625"&gt;up until
recently&lt;/a&gt;,
&lt;a href="http://www.zdnet.com/blog/open-source/linus-torvalds-on-android-the-linux-fork/9426"&gt;Google maintained its own
fork&lt;/a&gt;
of the kernel for it’s Android operating system.&lt;/p&gt;

&lt;h3 id="githubcom"&gt;github.com&lt;/h3&gt;

&lt;p&gt;The versioning control tool git was created by the Linux development
community in response to changes in the relationship between the open
source community and the company responsible for BitKeeper, the
versioning control system used up until 2005, much like they would on
other social networking sites, but rather than posts about current
gastronomic adventures, GitHub generates feeds of updates and changes
made to various software projects.&lt;/p&gt;

&lt;p&gt;There isn’t really a notion of a uniform social hierarchy, as everyone
is the maintainer of their own project, and may act as contributor to
any other project. Individual projects may be &lt;a href="https://github.com/explore"&gt;“trending” or
“featured”&lt;/a&gt; depending on activity.&lt;/p&gt;

&lt;h3 id="stackoverflowcom"&gt;stackoverflow.com&lt;/h3&gt;

&lt;p&gt;Still on the geek theme, stackoverflow is an invaluable resource to
many software developers, novice or advanced. Organized into a
question and answer format, anyone can post a question or an answer
and the site &lt;a href="http://stackoverflow.com/about"&gt;provides tools&lt;/a&gt; to
improve the quality of questions and up-vote helpful answers. There is
a notion of currency, called “reputation”, that members earn through
participating on the site. Gaining reputation can unlock certain
&lt;a href="http://stackoverflow.com/privileges"&gt;privileges&lt;/a&gt; that are not
available to all users. With enough reputation, individuals can be
elevated to &lt;a href="http://stackoverflow.com/users?tab=moderators"&gt;moderator&lt;/a&gt;
status, a role I would associate with Illich’s notion of an “elder”.&lt;/p&gt;

&lt;h3 id="couchsurfingorg"&gt;couchsurfing.org&lt;/h3&gt;

&lt;p&gt;&lt;iframe title="YouTube video player" width="584" height="329" src="http://www.youtube.com/embed/Lr_VNUTvOeQ%20" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Up until this point the sites I’ve surveyed have been what we would
generally refer to “virtual” spaces. The communities and interactions
exist primarily in
cyberspace. &lt;a href="https://www.couchsurfing.org"&gt;Couchsurfing&lt;/a&gt; is a bit
different. At its core it is a network of travelers who open their
homes to other travelers to provide a uniquely personal and rewarding
experience not available from hotels or other travel industry
offerings. It is focused on helping people explore the world by
connecting with other people in a particular geographic area, remote
or local, so many of the interactions take place in the “real”
world. However, a thriving virtual community is also an integral part
of the couchsurfing experience in the form of discussion forums
organized into groups of free formed topics ranging from &lt;a href="https://www.couchsurfing.org/n/places/blacksburg-virginia-united-states"&gt;geographic
areas&lt;/a&gt;,
to helping each other &lt;a href="https://www.couchsurfing.org/group.html?gid=21491"&gt;learn new
languages&lt;/a&gt;, to
&lt;a href="https://www.couchsurfing.org/group.html?gid=592"&gt;everything&lt;/a&gt;&lt;a href="https://www.couchsurfing.org/group.html?gid=2080"&gt;in&lt;/a&gt;&lt;a href="https://www.couchsurfing.org/group.html?gid=1302"&gt;between&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the first questions asked by couch surfing skeptics is “is it
safe”? There seems to be a common fear among those who do not
couchsurf that most strangers are creeps who would sooner steal your
wallet than let you stay for free on their couch. While most of those
who join couchsurfing do so because they naturally have a more
optimistic view of humanity, safety is &lt;a href="https://www.couchsurfing.org/n/help"&gt;a high
priority&lt;/a&gt; and a clear set of
&lt;a href="https://www.couchsurfing.org/n/guidelines"&gt;community guidelines&lt;/a&gt; are
published to help ensure everyone has a safe, enjoyable experience.&lt;/p&gt;

&lt;p&gt;Most importantly though, is the system of references in place that
enable members to rate the experience they had with other
members. References themselves do not directly lead to any increased
privileges in the community: members are free to use the information
as they see fit. Some opt to only host or otherwise connect with
people who have received a lot of positive references while others
will accept hosts or guests with few or no references. I have never
come across a profile with negative references. I suspect that this is
not because there are no negative experiences (in fact I have heard of
a couple from witnesses), but that people with negative references
don’t last long in the community. While there are many people who
would help those new members who do not have any references yet, I
think few would choose to welcome someone who has violated the spirit
of couchsurfing in some way.&lt;/p&gt;

&lt;p&gt;Separate but related to the reference system is the
&lt;a href="https://www.couchsurfing.org/vouch.html"&gt;vouching&lt;/a&gt; system. This is a
more formalized approach to building trust networks and is a more
integral part of the structure of the site in that being vouched for
can grant certain privileges, namely, the ability to vouch for
others. Unlike references, vouching is intended to ONLY apply to
people who have met face-to-face, though the enforcement of that rule
is left to the community itself.&lt;/p&gt;

&lt;h3 id="illichvillichnet"&gt;illichvillich.net&lt;/h3&gt;

&lt;p&gt;The greatest challenge I have faced in the creation of a space for
learning has been to identify which aspects of the previously
mentioned successful virtual communities should be integrated, and
how. At its core, the inspiration came from my understanding of the
role &lt;a href="http://www.umich.edu/~ece/student_projects/coffee/"&gt;english coffee
houses&lt;/a&gt; played in
the 17th and 18th century. While the idea of gathering around a
particular beverage was not unknown at the time, the precursor to
coffee was ale and along with the switch from a depressant to a
stimulant also came a marked change in the intellectual culture
surrounding these popular gather spots. People from all walks of life
were able to mingle and share ideas and the space became an
intellectual breeding ground separate, but connected with the
universities of the time. I can only imagine that without any set
curriculum the topics of discussion varied greatly with the interest
of the participants and the local events of the time.&lt;/p&gt;

&lt;p&gt;It goes without saying then (and yet, here I am, saying it), that
topics must be defined and controlled by the members. But I don’t want
to create yet another forum site.&lt;/p&gt;

&lt;p&gt;Of the &lt;a href="http://deschoolingsociety.digress.it/learning-webs/#24"&gt;four
networks&lt;/a&gt;
defined by Illich to enable his vision of a deschooled society:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reference Services to Educational Objects&lt;/li&gt;
  &lt;li&gt;Skill Exchanges&lt;/li&gt;
  &lt;li&gt;Peer-Matching&lt;/li&gt;
  &lt;li&gt;Reference Services to Educators-at-Large&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was most interested in building a Skill Exchange and Peer-Matching
network. I feel that if I can create a space that is successful in
that goal, the two “Reference Services” networks should follow
organically, as it seems the primary challenge there is collecting the
information, there are already well defined implementations of
“reference services”.&lt;/p&gt;

&lt;p&gt;On the face of it, implementing a skill exchange and peer-matching
network is just a matter of defining a data structure that can
associate a set of skills with a particular individual and then an
algorithm that will match people who have mutual skill-learning
interests. That’s the easy part. The challenge, which was brought up
during the final presentation day, is that most people are probably
not going to want to spend any amount of time entering individual
skills and interests they have and those they want to learn. Ideally
all a user would need to provide are links to existing blogging and
micro-blogging feeds, in which case we would need an algorithm that
would parse content that is already being created by each user to
determine skill sets and interests. This is the challenge, and a
complete lexicographic analysis is well beyond my current knowledge of
algorithm design. What would be relatively straight forward is
grabbing tags from existing structured feeds that provide that
information. It would still depend on self-reporting, but ideally
self-reporting that is already being done anyway.&lt;/p&gt;

&lt;p&gt;The real challenge has been to figure out what more to do. What I have
mentioned so far would be useful, but not particularly unique. In
fact, couchsurfing already has a notion of “Learn, Teach, Share” built
into the profiles, though the system doesn’t really facilitate
searching for people based on that information. The more I have talked
with Illich enthusiasts, the more it becomes clear that the real
potential lies in creating more of a platform for exploring ideas,
rather than just a repository of information. The last brainstorming
session I had quickly turned from the details of setting up a skill
exchange network to the much more difficult questions of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how is a unit of information stored?&lt;/li&gt;
  &lt;li&gt;who decides what a unit of information is?&lt;/li&gt;
  &lt;li&gt;how are individual units of information connected with one another?&lt;/li&gt;
  &lt;li&gt;how does a user effectively navigate a space of interconnected units of information?&lt;/li&gt;
  &lt;li&gt;how does a user track their personal path through a network of information nodes?&lt;/li&gt;
  &lt;li&gt;how does a user share their path through a network of information nodes?&lt;/li&gt;
  &lt;li&gt;who writes the information nodes?&lt;/li&gt;
  &lt;li&gt;should nodes have structural support for quizzes/practice exercises to help learners decide if they have mastered a particular topic well enough to move on to another?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then implementation details involved with all of those are of
course somewhat overwhelming at this point.&lt;/p&gt;

&lt;p&gt;I plan to have another brainstorming session tonight, with a different
group of hackers and see were these ideas lead. In the mean time, I
will continue to get a working implementation of a basic
skill-matching network up at
&lt;a href="http://www.illichvillich.net/"&gt;illichvillich.net&lt;/a&gt;, just as soon as
I’m finished posting final grades.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.hazyblue.me,2013-05-15:/2013/05/open-source-treks-to-the-final-frontier/</id>
    <title type="html">And Now You're an Astronaut: Open Source Treks to The Final Frontier</title>
    <published>2013-05-15T17:09:32Z</published>
    <updated>2013-05-15T17:09:32Z</updated>
    <link rel="alternate" href="http://www.hazyblue.me/2013/05/open-source-treks-to-the-final-frontier/"/>
    <content type="html">&lt;p&gt;There have &lt;a href="http://blogs.lt.vt.edu/leonp/2013/05/08/here-comes-linux/"&gt;been&lt;/a&gt; a &lt;a href="https://blogs.lt.vt.edu/hussaino/2013/05/15/linux-dominating-space/"&gt;couple&lt;/a&gt; of blog posts recently referencing the recent switch &lt;a href="http://www.nasa.gov/"&gt;NASA&lt;/a&gt; made from Windows to &lt;a href="http://www.debian.org/"&gt;Debian 6&lt;/a&gt;, a &lt;a href="http://www.gnu.org/gnu/linux-and-gnu.html"&gt;GNU/Linux&lt;/a&gt; distribution, as the OS running on the laptops aboard the &lt;a href="http://www.nasa.gov/mission_pages/station/main/index.html"&gt;International Space Station&lt;/a&gt;. It’s worth noting that Linux is no stranger to the ISS, as it has been a part of ground control operations &lt;a href="http://www.linux-magazine.com/w3/issue/12/Linux_on_the_International_Space_Station.pdf%20"&gt;since the beginning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reasons for the space-side switch &lt;a href="http://www.zdnet.com/to-the-space-station-and-beyond-with-linux-7000014958/"&gt;are quoted&lt;/a&gt; as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…we needed an operating system that was stable and reliable – one
that would give us in-house control. So if we needed to patch,
adjust, or adapt, we could.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is satisfying to many Open Source/Linux fans in its own right: a
collaborative open source project has
&lt;a href="http://en.wikipedia.org/wiki/Internet"&gt;once again&lt;/a&gt; proved itself more
stable and reliable for the (relatively) extraordinary conditions of low
Earth orbit than a product produced by a major software giant. Plus
one for open source collaboration and peer networks!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;But there’s another reason to be excited. And it’s a reason that would
not necessarily apply
(&lt;a href="https://www.youtube.com/watch?v=7XTHdcmjenI#t=9m08s"&gt;mostly&lt;/a&gt;) to,
say, Apple fanatics had NASA decided to switch to OS X instead of
Debian. And that reason has to do with the collaborative nature of the
open source movement, codified in many open source licenses under
which the software is released. Linux, and the GNU tools, which
together make up a fully functional operating system, are released
under the
&lt;a href="http://www.gnu.org/copyleft/gpl.html"&gt;GNU General Public License&lt;/a&gt;. Unlike
many licenses used for commercial software, the GPL ensures that
software licenses under its terms remains free for users to use,modify
and redistribute. There are certainly some strong criticisms and
&lt;a href="https://blogs.oracle.com/roumen/entry/sun_s_criticism_of_gpl"&gt;ongoing debate&lt;/a&gt;
regarding some key aspects of the GPL, especially
&lt;a href="http://www.osnews.com/story/19133/Torvalds_Still_Will_Not_License_Linux_Under_GPL_v3/"&gt;version 3&lt;/a&gt;,
the point of contention mostly lies in what is popularly called the
“viral” effect of the license: that modified and derived work must
also be released under the same license. The GPL might not be
appropriate for every developer and every project, but it embodies the
spirit of open source software in a way that is agreeable with many
developers and users.&lt;/p&gt;

&lt;p&gt;So what does this all mean in terms of NASA’s move? We already know
that they chose GNU/Linux for its reliability and stability over
alternatives, but that doesn’t mean it’s completely bug free, or will
always work perfectly with every piece of hardware, which after all is
another reason for the switch: no OS will be completely bug free or
always work with all hardware, but at least Debian gives NASA the
flexibility of making improvements themselves. And there in lies the
reason for excitement. While there is no requirement that NASA
redistribute their own modified versions of the software, there is no
reason to assume they wouldn’t in most cases, and if they do, it will
be redistributed under the same license. It’s certainly realistic to
expect they will be directing a lot of attention to making the Linux
kernel, and the GNU tools packaged with Debian even more stable and
more reliable, and those improvements will make their way back into
the general distributions that we all use. This means better hardware
support for all GNU/Linux users in the future!&lt;/p&gt;

&lt;p&gt;And of course it works both ways. Any bug fixes you make and
redistribute may make their way back to the ISS, transforming
humanity’s thirst for exploring “the final frontier” into a truly
collaborative and global endeavor.&lt;/p&gt;
</content>
  </entry>
</feed>
